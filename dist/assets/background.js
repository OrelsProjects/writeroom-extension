const S="https://www.writestack.io",p="api/v1/extension/log";async function o(e,t){t!==void 0?console.log(e,t):console.log(e);try{const r={message:e,data:t!==void 0?JSON.stringify(t):void 0,timestamp:new Date().toISOString(),source:"extension",level:"info"};await fetch(`${S}/${p}`,{method:"POST",body:JSON.stringify(r),credentials:"include",headers:{"Content-Type":"application/json"}})}catch(r){console.error("Failed to send log to server:",r)}}async function c(e,t){t!==void 0?console.error(e,t):console.error(e);try{const r={message:e,data:t!==void 0?JSON.stringify(t):void 0,timestamp:new Date().toISOString(),source:"extension",level:"error"};await fetch(`${S}/${p}`,{method:"POST",body:JSON.stringify(r),credentials:"include",headers:{"Content-Type":"application/json"}})}catch(r){console.error("Failed to send error log to server:",r)}}const m="writestack_schedules";async function I(e,t,r){if(!e||!t||!r)throw new Error("Invalid schedule parameters");const{schedules:s,alarms:a}=await h();if(s.some(b=>b.scheduleId===e))throw new Error(`Schedule with ID ${e} already exists`);const i={scheduleId:e,userId:t,timestamp:r},l=[...s,i];await f(l),await A(i),o(`Schedule created: ${e} at ${new Date(r).toISOString()}`);const g=await chrome.alarms.getAll();return o("All alarms",g),i}async function y(e){const{schedules:t,alarms:r}=await h(),s=t.filter(a=>a.scheduleId!==e);if(s.length===t.length)return!0;try{await chrome.alarms.clear(e)}catch(a){c(`Failed to clear alarm for schedule ${e}:`,a)}return await f(s),o(`Schedule deleted: ${e}`),!0}async function h(){try{const t=(await chrome.storage.local.get(m))[m]||[],r=await chrome.alarms.getAll();return{schedules:t,alarms:r}}catch(e){return c("Failed to get schedules:",e),{schedules:[],alarms:[]}}}async function f(e){try{o("Saving schedules",e),await chrome.storage.local.set({[m]:e})}catch(t){throw c("Failed to save schedules:",t),new Error("Failed to save schedules")}}async function A(e){try{if(o("Creating alarm for schedule",e.scheduleId),(await chrome.alarms.getAll()).find(r=>r.name===e.scheduleId)){o("Alarm already exists for schedule",e.scheduleId);return}chrome.alarms.create(e.scheduleId,{when:e.timestamp}),o(`Alarm created for schedule ${e.scheduleId} at ${new Date(e.timestamp).toISOString()}`)}catch(t){throw c(`Failed to create alarm for schedule ${e.scheduleId}:`,t),new Error("Failed to create alarm for schedule")}}const T="https://www.writestack.io";async function w(e,t={},r){try{let s=`${r||T}/${e}`;s=s.replace("\\\\","\\"),o("Making request",{url:s,options:t});const a=await fetch(s,{...t,credentials:"include",headers:{"Content-Type":"application/json",...t.headers}});if(!a.ok){const i=await a.text();return o("Request failed",{status:a.status,response:i}),{success:!1,error:i,status:a.status}}const n=await a.json();return o("Response json",n),{success:!0,data:n,status:a.status}}catch(s){return c("Request failed",s),{success:!1,error:s.message,status:500}}}async function $(e){try{const t=await fetch(e);if(!t.ok){const s=await t.text();return c(`Failed to fetch image from ${e}, got status: ${t.status}, response: ${s}`),null}const r=await t.arrayBuffer();return new Uint8Array(r)}catch(t){return c(`Error downloading image from ${e}:`,t),null}}async function O(e){if(!e)throw new Error("Invalid image data");try{const r=`data:image/png;base64,${P(e)}`;o("Uploading image to Substack",r);const s=await fetch("https://substack.com/api/v1/image",{headers:{"Content-Type":"application/json",Referer:"https://substack.com/home","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({image:r}),method:"POST"});if(!s.ok){const g=await s.text();throw c(`Failed to upload image to Substack: ${g}`),new Error("Failed to upload image to Substack")}const a=await s.json(),n=await fetch("https://substack.com/api/v1/comment/attachment",{headers:{"Content-Type":"application/json",Referer:"https://substack.com/home","Referrer-Policy":"strict-origin-when-cross-origin"},method:"POST",body:JSON.stringify({type:"image",url:a.url})});if(!n.ok){const g=await n.text();throw c(`Failed to get image from Substack: ${g}`),new Error("Failed to get image from Substack")}const i=await n.json(),l={id:i.id,url:i.imageUrl};return o(`Image uploaded to Substack: ${l.id}`),l}catch(t){throw c("Error uploading image to Substack:",t),new Error("Failed to upload image to Substack")}}function P(e){let t="";const r=new Uint8Array(e),s=r.byteLength;for(let a=0;a<s;a++)t+=String.fromCharCode(r[a]);return btoa(t)}async function E(e){if(!e||e.length===0)return[];const t=4,r=e.slice(0,t),s=[];o("Uploading attachments",r);for(const a of r)try{const n=await $(a);if(!n){c(`Failed to download image from ${a}`);continue}o("Got buffer! with length",n.length);const i=await O(n);s.push(i)}catch(n){c(`Error processing attachment from ${a}:`,n)}return s}const C=e=>`api/v1/extension/schedule/${e}/triggered`,_=e=>`api/v1/extension/schedule/${e}`;async function v(e){var s;o(`Handling triggered schedule: ${e.scheduleId}`);const{schedules:t}=await h(),r=t.find(a=>a.scheduleId===e.scheduleId);if(!r||r.isProcessing){o(`Skipping already processing schedule ${e.scheduleId}`);return}try{r.isProcessing=!0,await f([...t.filter(i=>i.scheduleId!==e.scheduleId),r]);const a=await D(e.scheduleId);if(o("getSchedule response",a),!a||!a.jsonBody){c(`Empty body received for schedule: ${e.scheduleId}`),await d(e,!1,"EMPTY_BODY");return}let n=[];if(a.attachmentUrls&&a.attachmentUrls.length>0)try{o("Preparing attachments",a.attachmentUrls),n=await E(a.attachmentUrls)}catch(i){c(`Failed to prepare attachments for schedule ${e.scheduleId}:`,i),await d(e,!1,"FAILED_TO_PREPARE_ATTACHMENTS",String(i));return}try{o("Posting to Substack",a.jsonBody);const i=await N({jsonBody:a.jsonBody,attachmentIds:n.map(l=>l.id)});o("Post result",i),i.success?(await d({...e,substackNoteId:(s=i.data)==null?void 0:s.id},!0),o(`Successfully posted to Substack for schedule: ${e.scheduleId}`)):(await d(e,!1,"FAILED_TO_POST_TO_SUBSTACK",i.error),c(`Failed to post to Substack for schedule ${e.scheduleId}:`,i.error))}catch(i){c(`Error posting to Substack for schedule ${e.scheduleId}:`,i),await d(e,!1,"FAILED_TO_CREATE_NOTE",String(i))}}catch(a){c(`Error handling schedule trigger for ${e.scheduleId}:`,a),await d(e,!1,"GENERAL_ERROR",String(a))}finally{r.isProcessing=!1,await f([...t.filter(a=>a.scheduleId!==e.scheduleId),r])}}async function D(e){try{o("Getting schedule",e);const t=await w(_(e),{method:"GET",headers:{"Content-Type":"application/json"}});return!t||!t.success?(c(`Error getting schedule ${e}: ${t==null?void 0:t.error}`),null):t.data}catch(t){throw c(`Error getting schedule ${e}:`,t),t}}async function d(e,t,r,s){try{const a={ok:t,substackNoteId:e.substackNoteId};!t&&r&&(a.error=r,s&&(a.text=s));const n=await w(C(e.scheduleId),{method:"POST",body:JSON.stringify(a)});(!n||!n.success)&&c(`Error notifying API about schedule result: ${n.status} ${n.error}`)}catch(a){c("Error notifying API about schedule result:",a)}}async function N(e){try{const t={bodyJson:e.jsonBody};e.attachmentIds.length>0&&(t.attachmentIds=e.attachmentIds);const r=JSON.stringify(t),s=await fetch("https://substack.com/api/v1/comment/feed",{headers:{"content-type":"application/json",Referer:"https://substack.com/home"},body:r,method:"POST"});if(!s.ok){const n=await s.text();return o("Error posting to Substack, response:",n),{success:!1,error:`API returned error: ${s.status} ${n}`}}o("Posting to Substack, response:",s);const a=await s.json();return{success:!0,data:a}}catch(t){return{success:!1,error:String(t)}}}const x="https://www.writestack.io",u={getSubstackCookies:async()=>new Promise((e,t)=>{chrome.cookies.getAll({domain:"substack.com"},r=>{if(chrome.runtime.lastError){c("Error fetching cookies:",chrome.runtime.lastError),t(chrome.runtime.lastError.message);return}if(!r||r.length===0){console.warn("No Substack cookies found."),e({message:"No Substack cookies found.",action:"SUBSTACK_COOKIES_FETCHED",result:""});return}const s=["substack.sid","__cf_bm","substack.lli"];o("Cookies:",r);const a=r.filter(l=>s.includes(l.name));if(a.length===0){console.warn("No relevant Substack auth cookies found."),e({message:"No relevant Substack auth cookies found.",action:"SUBSTACK_COOKIES_FETCHED",result:""});return}const n=a.map(l=>({name:l.name,value:l.value,expiresAt:l.expirationDate||null,domain:l.domain,path:l.path,secure:l.secure,httpOnly:l.httpOnly,sameSite:l.sameSite||"unspecified"})),i=JSON.stringify(n);e({message:"Cookies fetched successfully",action:"SUBSTACK_COOKIES_FETCHED",result:i})})}),createSubstackPost:async e=>{try{const t=typeof e=="string"?e:JSON.stringify(e),r=await fetch("https://substack.com/api/v1/comment/feed",{headers:{"content-type":"application/json",Referer:"https://substack.com/home"},body:t,method:"POST"}),s=await r.json();return r.ok?(o("Response:",r),o("Data after post sent:",s),{message:"Post created successfully",action:"SUBSTACK_POST_CREATED",result:JSON.stringify(s)}):(o("Response:",r),o("Data:",s),{message:"Failed to create post",action:"SUBSTACK_POST_CREATED",result:JSON.stringify({error:"Failed to create post"})})}catch(t){const r=t instanceof Error?t.message:String(t);throw o("Error creating Substack post",{error:r}),c("Error creating Substack post:",t),t}},setSubstackCookies:async()=>{const e=await u.getSubstackCookies(),t=JSON.parse(e.result);o("Sending to server:",JSON.stringify(t));try{const r=await fetch(`${x}/api/user/cookies`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!r.ok)return c("Failed to send cookies to server"),e;const s=await r.json();return o("Cookies sent to server successfully",s),e}catch(r){return c("Error sending cookies to server:",r),e}},createSchedule:async(e,t,r)=>{try{o("Creating schedule",{scheduleId:e,userId:t,timestamp:r});const s=await I(e,t,r);return o("Schedule created successfully",s),{message:"Schedule created successfully",action:"SCHEDULE_CREATED",result:s}}catch(s){const a=s instanceof Error?s.message:String(s);throw c("Error creating schedule:",a),s}},deleteSchedule:async e=>{try{const t=await y(e);return{message:t?"Schedule deleted successfully":"Schedule not found",action:"SCHEDULE_DELETED",result:t}}catch(t){const r=t instanceof Error?t.message:String(t);throw c("Error deleting schedule:",r),t}},getSchedules:async()=>{try{const{schedules:e,alarms:t}=await h();return{message:`Found ${e.length} schedules`,action:"SCHEDULES_FETCHED",result:{schedules:e,alarms:t}}}catch(e){const t=e instanceof Error?e.message:String(e);throw c("Error getting schedules:",t),e}},uploadImagesToSubstack:async e=>{if(o("Uploading images to Substack:",e),!e||!e.length)return{message:"No images to upload",action:"IMAGES_UPLOADED",result:[]};const t=[];try{const r=await E(e),s=new Map;r.forEach(a=>{s.set(a.url,a)});for(const a of e){const n=s.get(a);n?t.push({url:a,success:!0,attachmentId:n.id}):t.push({url:a,success:!1})}return{message:`Successfully uploaded ${r.length} of ${e.length} images`,action:"IMAGES_UPLOADED",result:t}}catch(r){const s=r instanceof Error?r.message:String(r);c("Error uploading images to Substack:",s);const a=new Set(t.map(n=>n.url));for(const n of e)a.has(n)||t.push({url:n,success:!1});return{message:`Error uploading images: ${s}`,action:"IMAGES_UPLOADED",result:t}}}};function k(e,t=[]){switch(e){case"getSubstackCookies":return u.getSubstackCookies();case"setSubstackCookies":return u.setSubstackCookies();case"createSubstackPost":return u.createSubstackPost(t[0],t[1],t[2]);case"createSchedule":return u.createSchedule(t[0],t[1],t[2]);case"deleteSchedule":return u.deleteSchedule(t[0]);case"getSchedules":return u.getSchedules();case"uploadImagesToSubstack":return u.uploadImagesToSubstack(t[0]);default:return Promise.reject(new Error(`Unknown action: ${e}`))}}chrome.alarms.onAlarm.addListener(async e=>{o(`Alarm triggered: ${e.name}`);const{schedules:t}=await h(),r=t.find(s=>s.scheduleId===e.name);if(r){o(`Processing schedule: ${r.scheduleId}`);try{await v(r),await y(r.scheduleId)}catch(s){c(`Error handling schedule ${r.scheduleId}:`,s)}}});chrome.runtime.onMessageExternal.addListener((e,t,r)=>{if(o("Background script received external message:",{request:e,sender:t==null?void 0:t.url,type:e==null?void 0:e.type}),(e==null?void 0:e.type)==="PING"){o("Received external PING, responding immediately");const s=chrome.runtime.getManifest().version;return o("Version:",s),r({success:!0,timestamp:Date.now(),version:s,message:"Extension is active",source:"external"}),!1}if((e==null?void 0:e.type)==="API_REQUEST"){const{action:s,params:a}=e;if(o("Received API request:",{action:s,params:a}),s)return k(s,a).then(n=>{r({success:!0,data:n})}).catch(n=>{c(`Error in API request (${s}):`,n),r({success:!1,error:n.message})}),!0}return!1});chrome.runtime.onMessage.addListener((e,t,r)=>{if(o("Background got internal message:",e),(e==null?void 0:e.type)==="PING")return r({success:!0,timestamp:Date.now(),message:"Extension is active",source:"internal"}),!1;if((e==null?void 0:e.type)==="API_REQUEST"){const{action:s,params:a}=e;if(o("API request:",{action:s,params:a}),s)return k(s,a).then(n=>{r({success:!0,data:n})}).catch(n=>{c(`Error in API request (${s}):`,n),r({success:!1,error:n.message})}),!0}return!1});async function F(){o("Initializing extension...");const{schedules:e,alarms:t}=await h();if(e.length>0){o(`Found ${e.length} schedules`);const r=Date.now(),s=e.filter(a=>a.timestamp>r);if(s.length>0){o(`Setting up alarms for ${s.length} future schedules`);for(const a of s)try{chrome.alarms.create(a.scheduleId,{when:a.timestamp}),o(`Alarm created for schedule ${a.scheduleId} at ${new Date(a.timestamp).toISOString()}`)}catch(n){c(`Error creating alarm for schedule ${a.scheduleId}:`,n)}}}}F().catch(e=>{c("Error initializing extension:",e)});
//# sourceMappingURL=background.js.map
