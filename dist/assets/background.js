const g="writestack_schedules";async function E(e,t,o){if(!e||!t||!o)throw new Error("Invalid schedule parameters");const r=await u();if(r.some(n=>n.scheduleId===e))throw new Error(`Schedule with ID ${e} already exists`);const a={scheduleId:e,userId:t,timestamp:o},c=[...r,a];return await S(c),await k(a),console.log(`Schedule created: ${e} at ${new Date(o).toISOString()}`),a}async function f(e){const t=await u(),o=t.filter(r=>r.scheduleId!==e);if(o.length===t.length)return!0;try{await chrome.alarms.clear(e)}catch(r){console.error(`Failed to clear alarm for schedule ${e}:`,r)}return await S(o),console.log(`Schedule deleted: ${e}`),!0}async function u(){try{return(await chrome.storage.local.get(g))[g]||[]}catch(e){return console.error("Failed to get schedules:",e),[]}}async function S(e){try{console.log("Saving schedules",e),await chrome.storage.local.set({[g]:e})}catch(t){throw console.error("Failed to save schedules:",t),new Error("Failed to save schedules")}}async function k(e){try{chrome.alarms.create(e.scheduleId,{when:e.timestamp}),console.log(`Alarm created for schedule ${e.scheduleId} at ${new Date(e.timestamp).toISOString()}`)}catch(t){throw console.error(`Failed to create alarm for schedule ${e.scheduleId}:`,t),new Error("Failed to create alarm for schedule")}}const b="https://www.writestack.io";async function p(e,t={},o){try{let r=`${o||b}/${e}`;r=r.replace("\\\\","\\"),console.log("Making request",r,t);const s=await fetch(r,{...t,credentials:"include",headers:{"Content-Type":"application/json",...t.headers}});if(!s.ok){const c=await s.text();return console.log("Request failed",s.status,c),{success:!1,error:c,status:s.status}}const a=await s.json();return console.log("Response json",a),{success:!0,data:a,status:s.status}}catch(r){return console.error("Request failed",r),{success:!1,error:r.message,status:500}}}async function I(e){try{const t=await fetch(e);if(!t.ok){const r=await t.text();return console.error(`Failed to fetch image from ${e}, got status: ${t.status}, response: ${r}`),null}const o=await t.arrayBuffer();return new Uint8Array(o)}catch(t){return console.error(`Error downloading image from ${e}:`,t),null}}async function T(e,t,o){if(!e)throw new Error("Invalid image data");try{const s=`data:image/png;base64,${$(e)}`;console.log("Uploading image to Substack",s);const a=await fetch("https://substack.com/api/v1/image",{headers:{"Content-Type":"application/json",Referer:"https://substack.com/home","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({image:s}),method:"POST"});if(!a.ok){const h=await a.text();throw console.error(`Failed to upload image to Substack: ${h}`),new Error("Failed to upload image to Substack")}const c=await a.json(),n=await fetch("https://substack.com/api/v1/comment/attachment",{headers:{"Content-Type":"application/json",Referer:"https://substack.com/home","Referrer-Policy":"strict-origin-when-cross-origin"},method:"POST",body:JSON.stringify({type:"image",url:c.url})});if(!n.ok){const h=await n.text();throw console.error(`Failed to get image from Substack: ${h}`),new Error("Failed to get image from Substack")}const d=await n.json(),m={id:d.id,url:d.imageUrl};return console.log(`Image uploaded to Substack: ${m.id}`),m}catch(r){throw console.error("Error uploading image to Substack:",r),new Error("Failed to upload image to Substack")}}function $(e){let t="";const o=new Uint8Array(e),r=o.byteLength;for(let s=0;s<r;s++)t+=String.fromCharCode(o[s]);return btoa(t)}async function A(e,t,o){if(!e||e.length===0)return[];const r=4,s=e.slice(0,r),a=[];console.log("Uploading attachments",s);for(const c of s)try{const n=await I(c);if(!n){console.error(`Failed to download image from ${c}`);continue}console.log("Got buffer! with length",n.length);const d=await T(n,t,o);a.push(d)}catch(n){console.error(`Error processing attachment from ${c}:`,n)}return a}const C=e=>`api/v1/extension/schedule/${e}/triggered`,P=e=>`api/v1/extension/schedule/${e}`;async function w(e){var t;console.log(`Handling triggered schedule: ${e.scheduleId}`);try{const o=await O(e.scheduleId);if(console.log("getSchedule response",o),!o||!o.jsonBody){console.error(`Empty body received for schedule: ${e.scheduleId}`),await i(e,!1,"EMPTY_BODY");return}let r=[];if(o.attachmentUrls&&o.attachmentUrls.length>0)try{console.log("Preparing attachments",o.attachmentUrls),r=await A(o.attachmentUrls,e.userId,e.scheduleId)}catch(s){console.error(`Failed to prepare attachments for schedule ${e.scheduleId}:`,s),await i(e,!1,"FAILED_TO_PREPARE_ATTACHMENTS",String(s));return}try{console.log("Posting to Substack",o.jsonBody);const s=await _({jsonBody:o.jsonBody,attachmentIds:r.map(a=>a.id)});console.log("Post result",s),s.success?(await i({...e,substackNoteId:(t=s.data)==null?void 0:t.id},!0),console.log(`Successfully posted to Substack for schedule: ${e.scheduleId}`)):(await i(e,!1,"FAILED_TO_POST_TO_SUBSTACK",s.error),console.error(`Failed to post to Substack for schedule ${e.scheduleId}:`,s.error))}catch(s){console.error(`Error posting to Substack for schedule ${e.scheduleId}:`,s),await i(e,!1,"FAILED_TO_CREATE_NOTE",String(s))}}catch(o){console.error(`Error handling schedule trigger for ${e.scheduleId}:`,o),await i(e,!1,"GENERAL_ERROR",String(o))}}async function O(e){try{console.log("Getting schedule",e);const t=await p(P(e),{method:"GET",headers:{"Content-Type":"application/json"}},"http://localhost:3000");return!t||!t.success?(console.error(`Error getting schedule ${e}: ${t==null?void 0:t.error}`),null):t.data}catch(t){throw console.error(`Error getting schedule ${e}:`,t),t}}async function i(e,t,o,r){try{const s={ok:t,substackNoteId:e.substackNoteId};!t&&o&&(s.error=o,r&&(s.text=r));const a=await p(C(e.scheduleId),{method:"POST",body:JSON.stringify(s)},"http://localhost:3000");(!a||!a.success)&&console.error(`Error notifying API about schedule result: ${a.status} ${a.error}`)}catch(s){console.error("Error notifying API about schedule result:",s)}}async function _(e){try{const t={bodyJson:e.jsonBody};e.attachmentIds.length>0&&(t.attachmentIds=e.attachmentIds);const o=JSON.stringify(t),r=await fetch("https://substack.com/api/v1/comment/feed",{headers:{"content-type":"application/json",Referer:"https://substack.com/home"},body:o,method:"POST"});if(!r.ok){const a=await r.text();return console.log("Error posting to Substack, response:",a),{success:!1,error:`API returned error: ${r.status} ${a}`}}console.log("Posting to Substack, response:",r);const s=await r.json();return{success:!0,data:s}}catch(t){return{success:!1,error:String(t)}}}const D="https://www.writestack.io";function x(e,t){const o=new Date().toISOString();console.log(`[SCHEDULED POST ${o}] ${e}`,t||"")}const l={getSubstackCookies:async()=>new Promise((e,t)=>{chrome.cookies.getAll({domain:"substack.com"},o=>{if(chrome.runtime.lastError){console.error("Error fetching cookies:",chrome.runtime.lastError),t(chrome.runtime.lastError.message);return}if(!o||o.length===0){console.warn("No Substack cookies found."),e({message:"No Substack cookies found.",action:"SUBSTACK_COOKIES_FETCHED",result:""});return}const r=["substack.sid","__cf_bm","substack.lli"];console.log("Cookies:",o);const s=o.filter(n=>r.includes(n.name));if(s.length===0){console.warn("No relevant Substack auth cookies found."),e({message:"No relevant Substack auth cookies found.",action:"SUBSTACK_COOKIES_FETCHED",result:""});return}const a=s.map(n=>({name:n.name,value:n.value,expiresAt:n.expirationDate||null,domain:n.domain,path:n.path,secure:n.secure,httpOnly:n.httpOnly,sameSite:n.sameSite||"unspecified"})),c=JSON.stringify(a);e({message:"Cookies fetched successfully",action:"SUBSTACK_COOKIES_FETCHED",result:c})})}),createSubstackPost:async e=>{try{const t=typeof e=="string"?e:JSON.stringify(e),o=await fetch("https://substack.com/api/v1/comment/feed",{headers:{"content-type":"application/json",Referer:"https://substack.com/home"},body:t,method:"POST"}),r=await o.json();return o.ok?(console.log("Response:",o),console.log("Data after post sent:",r),{message:"Post created successfully",action:"SUBSTACK_POST_CREATED",result:JSON.stringify(r)}):(console.log("Response:",o),console.log("Data:",r),{message:"Failed to create post",action:"SUBSTACK_POST_CREATED",result:JSON.stringify({error:"Failed to create post"})})}catch(t){const o=t instanceof Error?t.message:String(t);throw x("Error creating Substack post",{error:o}),console.error("Error creating Substack post:",t),t}},setSubstackCookies:async()=>{const e=await l.getSubstackCookies(),t=JSON.parse(e.result);console.log("Sending to server:",JSON.stringify(t));try{const o=await fetch(`${D}/api/user/cookies`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!o.ok)return console.error("Failed to send cookies to server"),e;const r=await o.json();return console.log("Cookies sent to server successfully"+r),e}catch(o){return console.error("Error sending cookies to server:",o),e}},createSchedule:async(e,t,o)=>{try{console.log("Creating schedule",e,t,o);const r=await E(e,t,o);return console.log("Schedule created successfully",r),{message:"Schedule created successfully",action:"SCHEDULE_CREATED",result:r}}catch(r){const s=r instanceof Error?r.message:String(r);throw console.error("Error creating schedule:",s),r}},deleteSchedule:async e=>{try{const t=await f(e);return{message:t?"Schedule deleted successfully":"Schedule not found",action:"SCHEDULE_DELETED",result:t}}catch(t){const o=t instanceof Error?t.message:String(t);throw console.error("Error deleting schedule:",o),t}},getSchedules:async()=>{try{const e=await u();return{message:`Found ${e.length} schedules`,action:"SCHEDULES_FETCHED",result:e}}catch(e){const t=e instanceof Error?e.message:String(e);throw console.error("Error getting schedules:",t),e}}};function y(e,t=[]){switch(e){case"getSubstackCookies":return l.getSubstackCookies();case"setSubstackCookies":return l.setSubstackCookies();case"createSubstackPost":return l.createSubstackPost(t[0],t[1],t[2]);case"createSchedule":return l.createSchedule(t[0],t[1],t[2]);case"deleteSchedule":return l.deleteSchedule(t[0]);case"getSchedules":return l.getSchedules();default:return Promise.reject(new Error(`Unknown action: ${e}`))}}chrome.alarms.onAlarm.addListener(async e=>{console.log(`Alarm triggered: ${e.name}`);const o=(await u()).find(r=>r.scheduleId===e.name);if(o){console.log(`Processing schedule: ${o.scheduleId}`);try{await w(o),await f(o.scheduleId)}catch(r){console.error(`Error handling schedule ${o.scheduleId}:`,r)}}});chrome.runtime.onMessageExternal.addListener((e,t,o)=>{if(console.log("Background script received external message:",e,"from:",t==null?void 0:t.url,"Type: ",e==null?void 0:e.type),(e==null?void 0:e.type)==="PING"){console.log("Received external PING, responding immediately");const r=chrome.runtime.getManifest().version;return console.log("Version:",r),o({success:!0,timestamp:Date.now(),version:r,message:"Extension is active",source:"external"}),!1}if((e==null?void 0:e.type)==="API_REQUEST"){const{action:r,params:s}=e;if(console.log("Received API request:",r,s),r)return y(r,s).then(a=>{o({success:!0,data:a})}).catch(a=>{console.error(`Error in API request (${r}):`,a),o({success:!1,error:a.message})}),!0}return!1});chrome.runtime.onMessage.addListener((e,t,o)=>{if(console.log("Background got internal message:",e),(e==null?void 0:e.type)==="PING")return o({success:!0,timestamp:Date.now(),message:"Extension is active",source:"internal"}),!1;if((e==null?void 0:e.type)==="API_REQUEST"){const{action:r,params:s}=e;if(console.log("API request:",r,s),r)return y(r,s).then(a=>{o({success:!0,data:a})}).catch(a=>{console.error(`Error in API request (${r}):`,a),o({success:!1,error:a.message})}),!0}return!1});async function F(){console.log("Initializing extension...");const e=await u();if(e.length>0){console.log(`Found ${e.length} schedules`);const t=Date.now(),o=e.filter(s=>s.timestamp<=t);if(o.length>0){console.log(`Processing ${o.length} past schedules`);for(const s of o)try{await w(s),await f(s.scheduleId)}catch(a){console.error(`Error handling past schedule ${s.scheduleId}:`,a)}}const r=e.filter(s=>s.timestamp>t);if(r.length>0){console.log(`Setting up alarms for ${r.length} future schedules`);for(const s of r)try{await chrome.alarms.create(s.scheduleId,{when:s.timestamp}),console.log(`Alarm created for schedule ${s.scheduleId} at ${new Date(s.timestamp).toISOString()}`)}catch(a){console.error(`Error creating alarm for schedule ${s.scheduleId}:`,a)}}}}F().catch(e=>{console.error("Error initializing extension:",e)});
//# sourceMappingURL=background.js.map
