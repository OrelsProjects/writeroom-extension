const H="http://localhost:3000";let D=[];chrome.storage.local.get("scheduledPosts",t=>{if(t.scheduledPosts){D=t.scheduledPosts,s("Loaded scheduled posts from storage",{count:D.length});const e=Date.now();D.forEach(n=>{if(n.status==="pending"&&n.scheduledTime>e){const a=n.scheduledTime-e;a>0&&a<864e5&&(s("Re-scheduling post after extension reload",{postId:n.id,remainingTime:Math.round(a/1e3)+"s"}),setTimeout(()=>{I(n.id)},a))}})}});function m(){chrome.storage.local.set({scheduledPosts:D},()=>{chrome.runtime.lastError&&console.error("Error saving scheduled posts:",chrome.runtime.lastError)})}function s(t,e){const n=new Date().toISOString();console.log(`[SCHEDULED POST ${n}] ${t}`,e||"")}async function h(t,e={}){const n=await fetch(`${H}${t}`,{...e,credentials:"include",headers:{"Content-Type":"application/json",...e.headers}});return n.ok?n.json():null}const C={updateIdeaStatus:async(t,e)=>{const n=e==="favorite"?"isFavorite=true":`status=${e}`;return h(`/api/idea/${t}/status?${n}`,{method:"PATCH"})},updateIdeaContent:async(t,e,n,a)=>h(`/api/idea/${t}`,{method:"PATCH",body:JSON.stringify({body:e,title:n,subtitle:a})}),generateIdeas:async(t="",e=3,n=!1)=>h(`/api/post/generate/ideas?topic=${t}&ideasCount=${e}&shouldSearch=${n}`),improveText:async(t,e,n)=>h("/api/post/improve",{method:"POST",body:JSON.stringify({text:t,type:e,ideaId:n})}),improveTitle:async(t,e,n,a)=>h("/api/post/improve/title",{method:"POST",body:JSON.stringify({menuType:t,improveType:e,ideaId:n,value:a})}),createNewIdea:async()=>h("/api/idea",{method:"POST"}),generateIdeasTest:async()=>h("/api/post/generate/ideas-test"),createSubstackPost:async(t="This is a test that was posted automatically with WriteRoom Chrome extension.",e=0,n=!0)=>{var a;try{if(s("createSubstackPost called",{message:t,scheduleSeconds:e,autoCloseTab:n}),e>0){const r=Date.now().toString(),l=Date.now()+e*1e3;s("Scheduling post for later",{postId:r,scheduledTime:l,autoCloseTab:n});const u={id:r,message:t,scheduledTime:l,status:"pending",autoCloseTab:n};return D.push(u),m(),s("Added post to queue",{queueLength:D.length}),s("Setting timeout for execution",{delaySeconds:e}),setTimeout(()=>{s("Timeout triggered, executing scheduled post",{postId:r}),I(r)},e*1e3),{success:!0,scheduled:!0,message:`Post scheduled to be published in ${e} seconds`,postId:r}}s("Proceeding with immediate posting");const g=await p();if(s("Permission check result",{hasPermissions:g}),!g)throw new Error("Missing scripting permission");s("Opening Substack tab");const T=await L(!0);if(s("Tab opened",{tabId:T==null?void 0:T.id}),!T||!T.id)throw new Error("Failed to open Substack tab");s("Waiting for page to load"),await new Promise(r=>setTimeout(r,5e3)),s("Checking if user is logged in");const d=(a=(await chrome.scripting.executeScript({target:{tabId:T.id},func:N,args:[]}))[0])==null?void 0:a.result;if(s("Login check result",{isLoggedIn:d}),!d)throw new Error("You need to be logged in to Substack to post. Please log in and try again.");s("Executing script to create post");const S=await chrome.scripting.executeScript({target:{tabId:T.id},func:y,args:[t]});return s("Script execution result",S),{success:!0,message:"Post created successfully",result:S}}catch(g){const T=g instanceof Error?g.message:String(g);return s("Error creating Substack post",{error:T}),console.error("Error creating Substack post:",g),{success:!1,error:T}}},getScheduledPosts:async()=>{var t;try{if(s("Getting scheduled posts",{count:D.length}),!chrome.runtime||chrome.runtime.lastError)throw new Error(((t=chrome.runtime.lastError)==null?void 0:t.message)||"Extension context invalid");return{success:!0,posts:D.map(e=>({id:e.id,message:e.message,scheduledTime:e.scheduledTime,status:e.status,error:e.error,autoCloseTab:e.autoCloseTab}))}}catch(e){const n=e instanceof Error?e.message:String(e);return console.error("Error fetching scheduled posts:",e),{success:!1,error:n}}}};async function p(){return new Promise(t=>{chrome.permissions.contains({permissions:["scripting"]},e=>{t(e)})})}async function L(t=!1){return new Promise(e=>{chrome.tabs.create({url:"https://substack.com",active:t},n=>{e(n)})})}function N(){return!0}function y(t){try{let e=function(c,d){var S;console.log(`[SCHEDULED POST - INJECTED] ${d}:`,{tagName:c.tagName,id:c.id,className:c.className,textContent:((S=c.textContent)==null?void 0:S.substring(0,50))+(c.textContent&&c.textContent.length>50?"...":""),html:c.outerHTML.substring(0,200)+(c.outerHTML.length>200?"...":"")})},n=function(){console.log("[SCHEDULED POST - INJECTED] STEP 1: Starting composer search"),console.log("[SCHEDULED POST - INJECTED] STEP 1.0: Trying direct Substack-specific methods first");const c=document.querySelector('a[href="/publish/post/new"]')||document.querySelector('a[href*="new-post"]')||document.querySelector('a[data-testid="new-post-button"]');if(c){console.log("[SCHEDULED POST - INJECTED] STEP 1.0.1: Found direct compose button"),e(c,"Compose button details");try{return console.log("[SCHEDULED POST - INJECTED] STEP 1.0.2: CLICKING direct compose button"),c.click(),console.log("[SCHEDULED POST - INJECTED] STEP 1.0.3: Click executed successfully"),!0}catch(o){console.error("[SCHEDULED POST - INJECTED] STEP 1.0.4: Error clicking compose button:",o)}}const d=Array.from(document.querySelectorAll("a, button")).filter(o=>{var P;const E=((P=o.textContent)==null?void 0:P.trim().toLowerCase())||"";return E==="new post"||E==="write"||E.includes("create post")});if(d.length>0){const o=d[0];console.log("[SCHEDULED POST - INJECTED] STEP 1.0.5: Found 'New post' button by text"),e(o,"New post button details");try{return console.log("[SCHEDULED POST - INJECTED] STEP 1.0.6: CLICKING 'New post' button"),o.click(),console.log("[SCHEDULED POST - INJECTED] STEP 1.0.7: Click executed successfully"),!0}catch(E){console.error("[SCHEDULED POST - INJECTED] STEP 1.0.8: Error clicking 'New post' button:",E)}}const S=[".inlineComposer-v8PLSi",".inline-composer",'[class*="composer"]','div[role="button"]','[placeholder*="post"]','[placeholder*="write"]','[placeholder*="mind"]'];console.log("[SCHEDULED POST - INJECTED] STEP 1.1: Logging all divs with role=button");const r=document.querySelectorAll('div[role="button"]');console.log("[SCHEDULED POST - INJECTED] Found "+r.length+" divs with role=button"),Array.from(r).forEach((o,E)=>{console.log(`[SCHEDULED POST - INJECTED] Button ${E}: text="${o.textContent}", innerHTML="${o.innerHTML.substring(0,100)}..."`)}),console.log("[SCHEDULED POST - INJECTED] STEP 1.2: Trying each selector");for(const o of S){const E=document.querySelectorAll(o);if(console.log(`[SCHEDULED POST - INJECTED] Selector "${o}" matched ${E.length} elements`),E.length>0){console.log(`[SCHEDULED POST - INJECTED] STEP 1.3: Found ${E.length} elements with selector "${o}"`);for(const f of Array.from(E)){const b=f.textContent||"";if(b.includes("What's on your mind")||b.includes("post")||b.includes("Share")||b.includes("Write")){console.log("[SCHEDULED POST - INJECTED] STEP 1.4: Found composer with matching text:",b),e(f,"Composer element details"),console.log("[SCHEDULED POST - INJECTED] STEP 1.5: CLICKING composer element");try{return f.click(),console.log("[SCHEDULED POST - INJECTED] STEP 1.6: Click executed successfully"),!0}catch(O){console.error("[SCHEDULED POST - INJECTED] STEP 1.7: Error clicking composer:",O)}}}console.log("[SCHEDULED POST - INJECTED] STEP 1.8: No text match found, trying first matched element as composer");const P=E[0];e(P,"First matched element details");try{return console.log("[SCHEDULED POST - INJECTED] STEP 1.9: CLICKING first element"),P.click(),console.log("[SCHEDULED POST - INJECTED] STEP 1.10: Click executed successfully"),!0}catch(f){console.error("[SCHEDULED POST - INJECTED] STEP 1.11: Error clicking first element:",f)}}}console.log("[SCHEDULED POST - INJECTED] STEP 1.12: No selectors matched, trying text-based div search");const l=document.querySelectorAll("div");console.log(`[SCHEDULED POST - INJECTED] Searching through ${l.length} divs for text matches`);let u=null;for(const o of Array.from(l)){const E=o.textContent||"";if(E.includes("What's on your mind")||E.includes("post")||E.includes("Share")||E.includes("Write")){console.log("[SCHEDULED POST - INJECTED] STEP 1.13: Found div with relevant text:",E),e(o,"Text-matched div details"),u=o;break}}if(u)try{return console.log("[SCHEDULED POST - INJECTED] STEP 1.14: CLICKING text-matched div"),u.click(),console.log("[SCHEDULED POST - INJECTED] STEP 1.15: Click executed successfully"),!0}catch(o){console.error("[SCHEDULED POST - INJECTED] STEP 1.16: Error clicking text-matched div:",o)}console.log("[SCHEDULED POST - INJECTED] STEP 1.17: Trying to click any div that looks like a button");const i=Array.from(document.querySelectorAll("div")).filter(o=>window.getComputedStyle(o).cursor==="pointer"||o.getAttribute("role")==="button"||o.className&&o.className.toLowerCase().includes("button"));console.log(`[SCHEDULED POST - INJECTED] Found ${i.length} button-like divs`);for(const o of i)try{return console.log("[SCHEDULED POST - INJECTED] STEP 1.18: CLICKING button-like div"),e(o,"Button-like div details"),o.click(),console.log("[SCHEDULED POST - INJECTED] STEP 1.19: Click executed successfully"),!0}catch(E){console.log("[SCHEDULED POST - INJECTED] Error clicking button-like div:",E)}return console.log("[SCHEDULED POST - INJECTED] STEP 1.20: No suitable composer element found after all attempts"),!1},a=function(){console.log("[SCHEDULED POST - INJECTED] STEP 2: Starting editor search"),console.log("[SCHEDULED POST - INJECTED] STEP 2.0: Looking for Substack title field"),console.log("[SCHEDULED POST - INJECTED] Pausing briefly to allow editor to fully load");const c=document.querySelectorAll('input[placeholder*="Title"], input[aria-label*="title"], div[role="textbox"][aria-label*="title"], h1[contenteditable="true"]');if(console.log(`[SCHEDULED POST - INJECTED] STEP 2.0.1: Found ${c.length} possible title inputs`),Array.from(c).forEach((r,l)=>{e(r,`Title input ${l} details`)}),c.length>0){const r=c[0];console.log("[SCHEDULED POST - INJECTED] STEP 2.0.2: Using first element as title input");try{console.log("[SCHEDULED POST - INJECTED] STEP 2.0.3: Setting title"),r.tagName.toLowerCase()==="input"?(r.value="Test Post from WriteRoom",r.dispatchEvent(new Event("input",{bubbles:!0})),r.dispatchEvent(new Event("change",{bubbles:!0}))):(r.focus(),r.innerHTML="Test Post from WriteRoom",r.dispatchEvent(new Event("input",{bubbles:!0})),r.dispatchEvent(new Event("change",{bubbles:!0}))),console.log("[SCHEDULED POST - INJECTED] STEP 2.0.4: Title set successfully")}catch(l){console.error("[SCHEDULED POST - INJECTED] STEP 2.0.5: Error setting title:",l)}}console.log("[SCHEDULED POST - INJECTED] STEP 2.0.6: Looking for main editor field");const d=document.querySelectorAll('.redactor-styles, .redactor-editor, [data-slate-editor="true"], [role="textbox"][contenteditable="true"]');if(d.length>0){console.log(`[SCHEDULED POST - INJECTED] STEP 2.0.7: Found ${d.length} possible editor containers`);const r=d[0];e(r,"Editor container details");try{return console.log("[SCHEDULED POST - INJECTED] STEP 2.0.8: Setting editor content"),r.focus(),r.innerHTML=`<p>${t}</p>`,r.dispatchEvent(new Event("input",{bubbles:!0})),r.dispatchEvent(new Event("change",{bubbles:!0})),console.log("[SCHEDULED POST - INJECTED] STEP 2.0.9: Editor content set successfully"),!0}catch(l){console.error("[SCHEDULED POST - INJECTED] STEP 2.0.10: Error setting editor content:",l)}}const S=document.querySelectorAll('[contenteditable="true"]');if(S.length>0){const r=S[0];console.log("[SCHEDULED POST - INJECTED] STEP 2.1: Found contenteditable element"),e(r,"Selected editor details");try{return console.log("[SCHEDULED POST - INJECTED] STEP 2.2: Setting editor content"),r.focus(),r.innerHTML=`<p>${t}</p>`,r.dispatchEvent(new Event("input",{bubbles:!0})),r.dispatchEvent(new Event("change",{bubbles:!0})),console.log("[SCHEDULED POST - INJECTED] STEP 2.3: Editor content set successfully"),!0}catch(l){console.error("[SCHEDULED POST - INJECTED] STEP 2.4: Error setting editor content:",l)}}return console.log("[SCHEDULED POST - INJECTED] STEP 2.5: No editor found after all attempts"),!1},g=function(){var r,l,u;console.log("[SCHEDULED POST - INJECTED] STEP 3: Looking for publish/post button"),console.log("[SCHEDULED POST - INJECTED] STEP 3.1: Looking for Substack's pencraft buttons");const c=document.querySelectorAll('button.priority_primary-RfbeYt, button[class*="priority_primary"]');if(console.log(`[SCHEDULED POST - INJECTED] STEP 3.1.1: Found ${c.length} pencraft primary buttons`),c.length>0){Array.from(c).forEach((i,o)=>{e(i,`Pencraft button ${o} details`)});for(const i of Array.from(c)){const o=((r=i.textContent)==null?void 0:r.trim().toLowerCase())||"";if(console.log(`[SCHEDULED POST - INJECTED] STEP 3.1.2: Checking button with text: "${o}"`),o==="post"){console.log("[SCHEDULED POST - INJECTED] STEP 3.1.3: Found exact Post button");try{return i.click(),console.log("[SCHEDULED POST - INJECTED] STEP 3.1.4: Clicked Post button"),!0}catch(E){console.error("[SCHEDULED POST - INJECTED] STEP 3.1.5: Error clicking Post button:",E)}}}console.log("[SCHEDULED POST - INJECTED] STEP 3.1.6: No exact Post button found, using first primary button");try{return c[0].click(),console.log("[SCHEDULED POST - INJECTED] STEP 3.1.7: Clicked first primary button"),!0}catch(i){console.error("[SCHEDULED POST - INJECTED] STEP 3.1.8: Error clicking first primary button:",i)}}const d=['button[data-testid="publish-button"]','button[aria-label*="publish"]','button.buttonNew-KfJF0Q:not([class*="secondary"])',"button.button--primary","button.primary","button.publish"];console.log("[SCHEDULED POST - INJECTED] STEP 3.2: Trying Substack-specific publish selectors");for(const i of d)try{const o=document.querySelectorAll(i);if(console.log(`[SCHEDULED POST - INJECTED] STEP 3.2.1: Selector "${i}" matched ${o.length} elements`),o.length>0){const E=o[0];e(E,"Publish button details");try{return E.click(),console.log("[SCHEDULED POST - INJECTED] STEP 3.2.2: Clicked publish button"),setTimeout(T,1500),!0}catch(P){console.error("[SCHEDULED POST - INJECTED] STEP 3.2.3: Error clicking publish button:",P)}}}catch(o){console.error(`[SCHEDULED POST - INJECTED] STEP 3.2.4: Error with selector "${i}":`,o)}console.log("[SCHEDULED POST - INJECTED] STEP 3.3: Looking for buttons with 'post' or 'publish' text");const S=document.querySelectorAll("button");console.log(`[SCHEDULED POST - INJECTED] STEP 3.3.1: Found ${S.length} buttons total`),Array.from(S).slice(0,5).forEach((i,o)=>{e(i,`Button ${o} details`)});for(const i of Array.from(S))if((((l=i.textContent)==null?void 0:l.trim().toLowerCase())||"")==="post"){console.log("[SCHEDULED POST - INJECTED] STEP 3.3.2: Found button with exact 'post' text"),e(i,"Post button details");try{return i.click(),console.log("[SCHEDULED POST - INJECTED] STEP 3.3.3: Clicked Post button"),!0}catch(E){console.error("[SCHEDULED POST - INJECTED] STEP 3.3.4: Error clicking Post button:",E)}}for(const i of Array.from(S)){const o=((u=i.textContent)==null?void 0:u.toLowerCase())||"";if(o.includes("post")||o.includes("publish")){console.log(`[SCHEDULED POST - INJECTED] STEP 3.3.5: Found button with text containing 'post' or 'publish': "${o}"`),e(i,"Post/Publish text button details");try{return i.click(),console.log("[SCHEDULED POST - INJECTED] STEP 3.3.6: Clicked post/publish text button"),!0}catch(E){console.error("[SCHEDULED POST - INJECTED] STEP 3.3.7: Error clicking post/publish text button:",E)}}}return console.log("[SCHEDULED POST - INJECTED] STEP 3.4: No post/publish button found after all attempts"),!1},T=function(){var S,r;console.log("[SCHEDULED POST - INJECTED] STEP 4: Looking for confirmation dialog");const c=['button:contains("Publish now")','button:contains("Confirm")','button:contains("Yes")',"button.confirm","button.primary:not(:disabled)",'div[role="dialog"] button.primary'];console.log("[SCHEDULED POST - INJECTED] STEP 4.1: Trying confirmation dialog selectors");for(const l of c)try{const u=document.querySelectorAll(l);if(console.log(`[SCHEDULED POST - INJECTED] STEP 4.1.1: Selector "${l}" matched ${u.length} elements`),u.length>0){const i=u[0];e(i,"Confirmation button details");const o=((S=i.textContent)==null?void 0:S.toLowerCase())||"";if(o.includes("publish")||o.includes("confirm")||o.includes("yes"))return console.log("[SCHEDULED POST - INJECTED] STEP 4.1.2: Found confirmation button with text:",o),i.click(),console.log("[SCHEDULED POST - INJECTED] STEP 4.1.3: Clicked confirmation button - POST CONFIRMED"),!0}}catch(u){console.error(`[SCHEDULED POST - INJECTED] STEP 4.1.4: Error with selector "${l}":`,u)}console.log("[SCHEDULED POST - INJECTED] STEP 4.2: Looking for dialog buttons");const d=document.querySelectorAll('div[role="dialog"], .modal, [class*="modal"], [class*="dialog"]');if(d.length>0){console.log(`[SCHEDULED POST - INJECTED] STEP 4.2.1: Found ${d.length} possible dialogs`);const l=d[0];e(l,"Dialog details");const u=l.querySelectorAll("button");console.log(`[SCHEDULED POST - INJECTED] STEP 4.2.2: Found ${u.length} buttons in dialog`),Array.from(u).forEach((i,o)=>{e(i,`Dialog button ${o} details`)});for(const i of Array.from(u)){const o=((r=i.textContent)==null?void 0:r.toLowerCase())||"";if(o.includes("publish")||o.includes("confirm")||o.includes("yes")||o.includes("ok")||o.includes("submit")){console.log("[SCHEDULED POST - INJECTED] STEP 4.2.3: Found likely confirmation button in dialog:",o);try{return i.click(),console.log("[SCHEDULED POST - INJECTED] STEP 4.2.4: Clicked dialog confirmation button - POST CONFIRMED"),!0}catch(E){console.error("[SCHEDULED POST - INJECTED] STEP 4.2.5: Error clicking dialog confirmation button:",E)}}}if(u.length>0){const i=u[u.length-1];console.log("[SCHEDULED POST - INJECTED] STEP 4.2.6: Trying last button in dialog as confirmation");try{return i.click(),console.log("[SCHEDULED POST - INJECTED] STEP 4.2.7: Clicked last dialog button - POST LIKELY CONFIRMED"),!0}catch(o){console.error("[SCHEDULED POST - INJECTED] STEP 4.2.8: Error clicking last dialog button:",o)}}}return console.log("[SCHEDULED POST - INJECTED] STEP 4.3: No confirmation dialog or button found"),!1};return console.log("[SCHEDULED POST - INJECTED] Starting createPost function",{message:t}),console.log("[SCHEDULED POST - INJECTED] Current URL:",window.location.href),console.log("[SCHEDULED POST - INJECTED] Page title:",document.title),console.log("[SCHEDULED POST - INJECTED] First 1000 chars of body HTML:",document.body?document.body.innerHTML.substring(0,1e3):"No body found"),!window.location.href.includes("substack.com")||window.location.pathname!=="/"&&window.location.pathname!=="/home"&&!window.location.pathname.includes("/p/")?(console.log("[SCHEDULED POST - INJECTED] Not on main feed, navigating",{currentUrl:window.location.href}),window.location.href="https://substack.com/",{success:!1,error:"Navigating to Substack home page"}):(console.log("[SCHEDULED POST - INJECTED] Using direct approach to create post"),console.log("[SCHEDULED POST - INJECTED] Setting up posting sequence with timeouts"),setTimeout(()=>{console.log("[SCHEDULED POST - INJECTED] Phase 1: Finding and clicking composer"),n()?(console.log("[SCHEDULED POST - INJECTED] Composer clicked successfully, waiting 3 seconds for editor to appear"),setTimeout(()=>{console.log("[SCHEDULED POST - INJECTED] Phase 2: Finding and populating editor"),a()?(console.log("[SCHEDULED POST - INJECTED] Editor populated successfully, waiting 3 seconds for publish button"),setTimeout(()=>{console.log("[SCHEDULED POST - INJECTED] Phase 3: Finding and clicking publish button"),g()?console.log("[SCHEDULED POST - INJECTED] Publish button clicked successfully - POST COMPLETE"):console.log("[SCHEDULED POST - INJECTED] Failed to find and click publish button")},3e3)):console.log("[SCHEDULED POST - INJECTED] Failed to find and populate editor")},3e3)):console.log("[SCHEDULED POST - INJECTED] Failed to find and click composer")},2e3),{success:!0,error:"Post operation started. Check the console for detailed logs."})}catch(e){const n=e instanceof Error?e.message:String(e);return console.error("[SCHEDULED POST - INJECTED] Error in createPost:",e),{success:!1,error:n}}}function U(t,e=[]){switch(t){case"updateIdeaStatus":return C.updateIdeaStatus(e[0],e[1]);case"updateIdeaContent":return C.updateIdeaContent(e[0],e[1],e[2],e[3]);case"generateIdeas":return C.generateIdeas(e[0],e[1],e[2]);case"improveText":return C.improveText(e[0],e[1],e[2]);case"improveTitle":return C.improveTitle(e[0],e[1],e[2],e[3]);case"createNewIdea":return C.createNewIdea();case"generateIdeasTest":return C.generateIdeasTest();case"createSubstackPost":return C.createSubstackPost(e[0],e[1],e[2]);case"getScheduledPosts":return C.getScheduledPosts();default:return Promise.reject(new Error(`Unknown action: ${t}`))}}chrome.runtime.onMessage.addListener((t,e,n)=>{if(console.log("Background script received message:",t),t.type==="API_REQUEST"){const{action:a,params:g}=t;if(a)return U(a,g).then(T=>{n({success:!0,data:T})}).catch(T=>{console.error(`Error in API request (${a}):`,T),n({success:!1,error:T.message})}),!0}if(t.type==="GENERATE_IDEAS")return C.generateIdeasTest().then(a=>{n({success:!0,data:a})}).catch(a=>{console.error("Error generating ideas:",a),n({success:!1,error:a.message})}),!0});async function I(t){var a;const e=D.findIndex(g=>g.id===t);if(s("Executing scheduled post",{postId:t,postIndex:e}),e===-1){s("Post not found in queue",{postId:t});return}D[e].status="processing",m(),s("Updated post status to processing",{postId:t});let n=null;try{s("Checking permissions",{postId:t});const g=await p();if(s("Permission check result",{postId:t,hasPermissions:g}),!g)throw new Error("Missing scripting permission");if(s("Opening Substack tab in background",{postId:t}),n=await L(!1),s("Tab opened in background",{postId:t,tabId:n==null?void 0:n.id}),!n||!n.id)throw new Error("Failed to open Substack tab");s("Waiting for page to fully load",{postId:t}),await new Promise(r=>setTimeout(r,1e4)),s("Checking if user is logged in",{postId:t});const c=(a=(await chrome.scripting.executeScript({target:{tabId:n.id},func:N,args:[]}))[0])==null?void 0:a.result;if(s("Login check result",{postId:t,isLoggedIn:c}),!c)throw new Error("You need to be logged in to Substack to post");if(s("About to post message",{postId:t,messagePreview:D[e].message.substring(0,30)+"..."}),s("Setting up console monitoring",{postId:t}),n&&n.id)try{chrome.scripting.executeScript({target:{tabId:n.id},func:()=>{const r=console.log;console.log=function(...l){r.apply(console,l);const u=l.join(" ");typeof u=="string"&&u.includes("[SCHEDULED POST - INJECTED]")&&window.postMessage({type:"SCHEDULED_POST_LOG",message:u},"*")},window.addEventListener("message",l=>{l.data&&l.data.type==="SCHEDULED_POST_LOG"&&r("%c[CAPTURED LOG]","color: purple; font-weight: bold",l.data.message)})}}),s("Console monitoring set up successfully",{postId:t})}catch(r){s("Failed to set up console monitoring (this is non-critical)",{postId:t,error:r instanceof Error?r.message:String(r)})}s("Executing script to create post",{postId:t});const d=await chrome.scripting.executeScript({target:{tabId:n.id},func:y,args:[D[e].message]});s("Script execution result",{postId:t,result:d}),s("Waiting for posting process to complete",{postId:t}),await new Promise(r=>setTimeout(r,8e3)),D[e].status="completed",m(),s("Updated post status to completed",{postId:t});const S=D[e].autoCloseTab!==!1;s("Checking if tab should be closed",{postId:t,shouldCloseTab:S}),S?(s("Setting timeout to close tab",{postId:t}),setTimeout(()=>{n&&n.id&&(s("Closing tab",{postId:t,tabId:n.id}),chrome.tabs.remove(n.id))},1e4)):s("Tab will remain open as requested",{postId:t})}catch(g){const T=g instanceof Error?g.message:String(g);if(s("Error executing scheduled post",{postId:t,error:T}),console.error("Error executing scheduled post:",g),n&&n.id)try{s("Attempting to capture tab contents for debugging",{postId:t}),chrome.scripting.executeScript({target:{tabId:n.id},func:()=>{var c,d;return{url:window.location.href,title:document.title,bodyText:((d=(c=document.body)==null?void 0:c.textContent)==null?void 0:d.substring(0,1e3))||"No body text",html:document.documentElement.outerHTML}}}).then(c=>{var d,S,r,l;if(c&&c[0]){const u=c[0].result;s("Tab page info",{postId:t,url:u.url,title:u.title,bodyTextPreview:u.bodyText+"..."}),s("Tab HTML structure",{postId:t,headContent:((S=(d=u.html.match(/<head>(.*?)<\/head>/s))==null?void 0:d[0])==null?void 0:S.substring(0,500))+"..."||"No head content found",bodyStructure:((l=(r=u.html.match(/<body.*?>(.*?)<\/body>/s))==null?void 0:r[0])==null?void 0:l.substring(0,1e3))+"..."||"No body content found"})}}).catch(c=>{s("Failed to capture tab HTML",{postId:t,error:c})})}catch(c){s("Error capturing tab content",{postId:t,error:c instanceof Error?c.message:String(c)})}D[e].status="failed",D[e].error=T,m(),s("Updated post status to failed",{postId:t,error:T})}}
//# sourceMappingURL=background.js.map
