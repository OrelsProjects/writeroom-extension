const h="writestack_schedules";async function w(e,t,r){if(!e||!t||!r)throw new Error("Invalid schedule parameters");const o=await u();if(o.some(c=>c.scheduleId===e))throw new Error(`Schedule with ID ${e} already exists`);const a={scheduleId:e,userId:t,timestamp:r},n=[...o,a];return await d(n),await y(a),console.log(`Schedule created: ${e} at ${new Date(r).toISOString()}`),a}async function f(e){const t=await u(),r=t.filter(o=>o.scheduleId!==e);if(r.length===t.length)return!0;try{await chrome.alarms.clear(e)}catch(o){console.error(`Failed to clear alarm for schedule ${e}:`,o)}return await d(r),console.log(`Schedule deleted: ${e}`),!0}async function u(){try{return(await chrome.storage.local.get(h))[h]||[]}catch(e){return console.error("Failed to get schedules:",e),[]}}async function d(e){try{console.log("Saving schedules",e),await chrome.storage.local.set({[h]:e})}catch(t){throw console.error("Failed to save schedules:",t),new Error("Failed to save schedules")}}async function y(e){try{if(console.log("Creating alarm for schedule",e.scheduleId),(await chrome.alarms.getAll()).find(r=>r.name===e.scheduleId)){console.log("Alarm already exists for schedule",e.scheduleId);return}chrome.alarms.create(e.scheduleId,{when:e.timestamp}),console.log(`Alarm created for schedule ${e.scheduleId} at ${new Date(e.timestamp).toISOString()}`)}catch(t){throw console.error(`Failed to create alarm for schedule ${e.scheduleId}:`,t),new Error("Failed to create alarm for schedule")}}const E="https://www.writestack.io";async function m(e,t={},r){try{let o=`${r||E}/${e}`;o=o.replace("\\\\","\\"),console.log("Making request",o,t);const s=await fetch(o,{...t,credentials:"include",headers:{"Content-Type":"application/json",...t.headers}});if(!s.ok){const n=await s.text();return console.log("Request failed",s.status,n),{success:!1,error:n,status:s.status}}const a=await s.json();return console.log("Response json",a),{success:!0,data:a,status:s.status}}catch(o){return console.error("Request failed",o),{success:!1,error:o.message,status:500}}}async function k(e){try{const t=await fetch(e);if(!t.ok){const o=await t.text();return console.error(`Failed to fetch image from ${e}, got status: ${t.status}, response: ${o}`),null}const r=await t.arrayBuffer();return new Uint8Array(r)}catch(t){return console.error(`Error downloading image from ${e}:`,t),null}}async function b(e){if(!e)throw new Error("Invalid image data");try{const r=`data:image/png;base64,${I(e)}`;console.log("Uploading image to Substack",r);const o=await fetch("https://substack.com/api/v1/image",{headers:{"Content-Type":"application/json",Referer:"https://substack.com/home","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({image:r}),method:"POST"});if(!o.ok){const g=await o.text();throw console.error(`Failed to upload image to Substack: ${g}`),new Error("Failed to upload image to Substack")}const s=await o.json(),a=await fetch("https://substack.com/api/v1/comment/attachment",{headers:{"Content-Type":"application/json",Referer:"https://substack.com/home","Referrer-Policy":"strict-origin-when-cross-origin"},method:"POST",body:JSON.stringify({type:"image",url:s.url})});if(!a.ok){const g=await a.text();throw console.error(`Failed to get image from Substack: ${g}`),new Error("Failed to get image from Substack")}const n=await a.json(),c={id:n.id,url:n.imageUrl};return console.log(`Image uploaded to Substack: ${c.id}`),c}catch(t){throw console.error("Error uploading image to Substack:",t),new Error("Failed to upload image to Substack")}}function I(e){let t="";const r=new Uint8Array(e),o=r.byteLength;for(let s=0;s<o;s++)t+=String.fromCharCode(r[s]);return btoa(t)}async function S(e){if(!e||e.length===0)return[];const t=4,r=e.slice(0,t),o=[];console.log("Uploading attachments",r);for(const s of r)try{const a=await k(s);if(!a){console.error(`Failed to download image from ${s}`);continue}console.log("Got buffer! with length",a.length);const n=await b(a);o.push(n)}catch(a){console.error(`Error processing attachment from ${s}:`,a)}return o}const T=e=>`api/v1/extension/schedule/${e}/triggered`,A=e=>`api/v1/extension/schedule/${e}`;async function $(e){var o;console.log(`Handling triggered schedule: ${e.scheduleId}`);const t=await u(),r=t.find(s=>s.scheduleId===e.scheduleId);if(!r||r.isProcessing){console.warn(`Skipping already processing schedule ${e.scheduleId}`);return}try{r.isProcessing=!0,await d([...t.filter(n=>n.scheduleId!==e.scheduleId),r]);const s=await P(e.scheduleId);if(console.log("getSchedule response",s),!s||!s.jsonBody){console.error(`Empty body received for schedule: ${e.scheduleId}`),await i(e,!1,"EMPTY_BODY");return}let a=[];if(s.attachmentUrls&&s.attachmentUrls.length>0)try{console.log("Preparing attachments",s.attachmentUrls),a=await S(s.attachmentUrls)}catch(n){console.error(`Failed to prepare attachments for schedule ${e.scheduleId}:`,n),await i(e,!1,"FAILED_TO_PREPARE_ATTACHMENTS",String(n));return}try{console.log("Posting to Substack",s.jsonBody);const n=await C({jsonBody:s.jsonBody,attachmentIds:a.map(c=>c.id)});console.log("Post result",n),n.success?(await i({...e,substackNoteId:(o=n.data)==null?void 0:o.id},!0),console.log(`Successfully posted to Substack for schedule: ${e.scheduleId}`)):(await i(e,!1,"FAILED_TO_POST_TO_SUBSTACK",n.error),console.error(`Failed to post to Substack for schedule ${e.scheduleId}:`,n.error))}catch(n){console.error(`Error posting to Substack for schedule ${e.scheduleId}:`,n),await i(e,!1,"FAILED_TO_CREATE_NOTE",String(n))}}catch(s){console.error(`Error handling schedule trigger for ${e.scheduleId}:`,s),await i(e,!1,"GENERAL_ERROR",String(s))}finally{r.isProcessing=!1,await d([...t.filter(s=>s.scheduleId!==e.scheduleId),r])}}async function P(e){try{console.log("Getting schedule",e);const t=await m(A(e),{method:"GET",headers:{"Content-Type":"application/json"}});return!t||!t.success?(console.error(`Error getting schedule ${e}: ${t==null?void 0:t.error}`),null):t.data}catch(t){throw console.error(`Error getting schedule ${e}:`,t),t}}async function i(e,t,r,o){try{const s={ok:t,substackNoteId:e.substackNoteId};!t&&r&&(s.error=r,o&&(s.text=o));const a=await m(T(e.scheduleId),{method:"POST",body:JSON.stringify(s)});(!a||!a.success)&&console.error(`Error notifying API about schedule result: ${a.status} ${a.error}`)}catch(s){console.error("Error notifying API about schedule result:",s)}}async function C(e){try{const t={bodyJson:e.jsonBody};e.attachmentIds.length>0&&(t.attachmentIds=e.attachmentIds);const r=JSON.stringify(t),o=await fetch("https://substack.com/api/v1/comment/feed",{headers:{"content-type":"application/json",Referer:"https://substack.com/home"},body:r,method:"POST"});if(!o.ok){const a=await o.text();return console.log("Error posting to Substack, response:",a),{success:!1,error:`API returned error: ${o.status} ${a}`}}console.log("Posting to Substack, response:",o);const s=await o.json();return{success:!0,data:s}}catch(t){return{success:!1,error:String(t)}}}const O="https://www.writestack.io";function _(e,t){const r=new Date().toISOString();console.log(`[SCHEDULED POST ${r}] ${e}`,t||"")}const l={getSubstackCookies:async()=>new Promise((e,t)=>{chrome.cookies.getAll({domain:"substack.com"},r=>{if(chrome.runtime.lastError){console.error("Error fetching cookies:",chrome.runtime.lastError),t(chrome.runtime.lastError.message);return}if(!r||r.length===0){console.warn("No Substack cookies found."),e({message:"No Substack cookies found.",action:"SUBSTACK_COOKIES_FETCHED",result:""});return}const o=["substack.sid","__cf_bm","substack.lli"];console.log("Cookies:",r);const s=r.filter(c=>o.includes(c.name));if(s.length===0){console.warn("No relevant Substack auth cookies found."),e({message:"No relevant Substack auth cookies found.",action:"SUBSTACK_COOKIES_FETCHED",result:""});return}const a=s.map(c=>({name:c.name,value:c.value,expiresAt:c.expirationDate||null,domain:c.domain,path:c.path,secure:c.secure,httpOnly:c.httpOnly,sameSite:c.sameSite||"unspecified"})),n=JSON.stringify(a);e({message:"Cookies fetched successfully",action:"SUBSTACK_COOKIES_FETCHED",result:n})})}),createSubstackPost:async e=>{try{const t=typeof e=="string"?e:JSON.stringify(e),r=await fetch("https://substack.com/api/v1/comment/feed",{headers:{"content-type":"application/json",Referer:"https://substack.com/home"},body:t,method:"POST"}),o=await r.json();return r.ok?(console.log("Response:",r),console.log("Data after post sent:",o),{message:"Post created successfully",action:"SUBSTACK_POST_CREATED",result:JSON.stringify(o)}):(console.log("Response:",r),console.log("Data:",o),{message:"Failed to create post",action:"SUBSTACK_POST_CREATED",result:JSON.stringify({error:"Failed to create post"})})}catch(t){const r=t instanceof Error?t.message:String(t);throw _("Error creating Substack post",{error:r}),console.error("Error creating Substack post:",t),t}},setSubstackCookies:async()=>{const e=await l.getSubstackCookies(),t=JSON.parse(e.result);console.log("Sending to server:",JSON.stringify(t));try{const r=await fetch(`${O}/api/user/cookies`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!r.ok)return console.error("Failed to send cookies to server"),e;const o=await r.json();return console.log("Cookies sent to server successfully"+o),e}catch(r){return console.error("Error sending cookies to server:",r),e}},createSchedule:async(e,t,r)=>{try{console.log("Creating schedule",e,t,r);const o=await w(e,t,r);return console.log("Schedule created successfully",o),{message:"Schedule created successfully",action:"SCHEDULE_CREATED",result:o}}catch(o){const s=o instanceof Error?o.message:String(o);throw console.error("Error creating schedule:",s),o}},deleteSchedule:async e=>{try{const t=await f(e);return{message:t?"Schedule deleted successfully":"Schedule not found",action:"SCHEDULE_DELETED",result:t}}catch(t){const r=t instanceof Error?t.message:String(t);throw console.error("Error deleting schedule:",r),t}},getSchedules:async()=>{try{const e=await u();return{message:`Found ${e.length} schedules`,action:"SCHEDULES_FETCHED",result:e}}catch(e){const t=e instanceof Error?e.message:String(e);throw console.error("Error getting schedules:",t),e}},uploadImagesToSubstack:async e=>{if(console.log("Uploading images to Substack:",e),!e||!e.length)return{message:"No images to upload",action:"IMAGES_UPLOADED",result:[]};const t=[];try{const r=await S(e),o=new Map;r.forEach(s=>{o.set(s.url,s)});for(const s of e){const a=o.get(s);a?t.push({url:s,success:!0,attachmentId:a.id}):t.push({url:s,success:!1})}return{message:`Successfully uploaded ${r.length} of ${e.length} images`,action:"IMAGES_UPLOADED",result:t}}catch(r){const o=r instanceof Error?r.message:String(r);console.error("Error uploading images to Substack:",o);const s=new Set(t.map(a=>a.url));for(const a of e)s.has(a)||t.push({url:a,success:!1});return{message:`Error uploading images: ${o}`,action:"IMAGES_UPLOADED",result:t}}}};function p(e,t=[]){switch(e){case"getSubstackCookies":return l.getSubstackCookies();case"setSubstackCookies":return l.setSubstackCookies();case"createSubstackPost":return l.createSubstackPost(t[0],t[1],t[2]);case"createSchedule":return l.createSchedule(t[0],t[1],t[2]);case"deleteSchedule":return l.deleteSchedule(t[0]);case"getSchedules":return l.getSchedules();case"uploadImagesToSubstack":return l.uploadImagesToSubstack(t[0]);default:return Promise.reject(new Error(`Unknown action: ${e}`))}}chrome.alarms.onAlarm.addListener(async e=>{console.log(`Alarm triggered: ${e.name}`);const r=(await u()).find(o=>o.scheduleId===e.name);if(r){console.log(`Processing schedule: ${r.scheduleId}`);try{await $(r),await f(r.scheduleId)}catch(o){console.error(`Error handling schedule ${r.scheduleId}:`,o)}}});chrome.runtime.onMessageExternal.addListener((e,t,r)=>{if(console.log("Background script received external message:",e,"from:",t==null?void 0:t.url,"Type: ",e==null?void 0:e.type),(e==null?void 0:e.type)==="PING"){console.log("Received external PING, responding immediately");const o=chrome.runtime.getManifest().version;return console.log("Version:",o),r({success:!0,timestamp:Date.now(),version:o,message:"Extension is active",source:"external"}),!1}if((e==null?void 0:e.type)==="API_REQUEST"){const{action:o,params:s}=e;if(console.log("Received API request:",o,s),o)return p(o,s).then(a=>{r({success:!0,data:a})}).catch(a=>{console.error(`Error in API request (${o}):`,a),r({success:!1,error:a.message})}),!0}return!1});chrome.runtime.onMessage.addListener((e,t,r)=>{if(console.log("Background got internal message:",e),(e==null?void 0:e.type)==="PING")return r({success:!0,timestamp:Date.now(),message:"Extension is active",source:"internal"}),!1;if((e==null?void 0:e.type)==="API_REQUEST"){const{action:o,params:s}=e;if(console.log("API request:",o,s),o)return p(o,s).then(a=>{r({success:!0,data:a})}).catch(a=>{console.error(`Error in API request (${o}):`,a),r({success:!1,error:a.message})}),!0}return!1});async function D(){console.log("Initializing extension...");const e=await u();if(e.length>0){console.log(`Found ${e.length} schedules`);const t=Date.now(),r=e.filter(o=>o.timestamp>t);if(r.length>0){console.log(`Setting up alarms for ${r.length} future schedules`);for(const o of r)try{chrome.alarms.create(o.scheduleId,{when:o.timestamp}),console.log(`Alarm created for schedule ${o.scheduleId} at ${new Date(o.timestamp).toISOString()}`)}catch(s){console.error(`Error creating alarm for schedule ${o.scheduleId}:`,s)}}}}D().catch(e=>{console.error("Error initializing extension:",e)});
//# sourceMappingURL=background.js.map
