{"version":3,"file":"background.js","sources":["../../src/content/background.ts"],"sourcesContent":["// background.ts\nimport { getState } from '../lib/storage/chromeStorage';\nimport { IdeaStatus } from '@/types/idea';\n\n// Base URL for API requests\nconst API_BASE_URL = 'http://localhost:3000';\n\nasync function makeAuthenticatedRequest(\n  endpoint: string,\n  options: RequestInit = {}\n) {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    ...options,\n    credentials: \"include\", // Include cookies automatically\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  });\n\n  if (!response.ok) {\n    return null;\n  }\n\n  return response.json();\n}\n\n// Define API handler types\ntype ApiHandlers = {\n  updateIdeaStatus: (ideaId: string, status: IdeaStatus | \"favorite\") => Promise<any>;\n  updateIdeaContent: (ideaId: string, body: string, title: string, subtitle: string) => Promise<any>;\n  generateIdeas: (topic?: string, ideasCount?: number, shouldSearch?: boolean) => Promise<any>;\n  improveText: (text: string, type: string, ideaId: string) => Promise<any>;\n  improveTitle: (menuType: \"title\" | \"subtitle\", improveType: string, ideaId: string, value: string) => Promise<any>;\n  createNewIdea: () => Promise<any>;\n  generateIdeasTest: () => Promise<any>;\n};\n\n// API request handlers\nconst apiHandlers: ApiHandlers = {\n  // Idea status update\n  updateIdeaStatus: async (ideaId: string, status: IdeaStatus | \"favorite\") => {\n    const searchParamsStatus = status === \"favorite\" ? \"isFavorite=true\" : `status=${status}`;\n    return makeAuthenticatedRequest(`/api/idea/${ideaId}/status?${searchParamsStatus}`, {\n      method: 'PATCH'\n    });\n  },\n\n  // Idea content update\n  updateIdeaContent: async (ideaId: string, body: string, title: string, subtitle: string) => {\n    return makeAuthenticatedRequest(`/api/idea/${ideaId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        body,\n        title,\n        subtitle,\n      })\n    });\n  },\n\n  // Generate ideas\n  generateIdeas: async (topic: string = \"\", ideasCount: number = 3, shouldSearch: boolean = false) => {\n    return makeAuthenticatedRequest(\n      `/api/post/generate/ideas?topic=${topic}&ideasCount=${ideasCount}&shouldSearch=${shouldSearch}`\n    );\n  },\n\n  // Improve text\n  improveText: async (text: string, type: string, ideaId: string) => {\n    return makeAuthenticatedRequest(\"/api/post/improve\", {\n      method: 'POST',\n      body: JSON.stringify({\n        text,\n        type,\n        ideaId,\n      })\n    });\n  },\n\n  // Improve title or subtitle\n  improveTitle: async (menuType: \"title\" | \"subtitle\", improveType: string, ideaId: string, value: string) => {\n    return makeAuthenticatedRequest(\"/api/post/improve/title\", {\n      method: 'POST',\n      body: JSON.stringify({\n        menuType,\n        improveType,\n        ideaId,\n        value,\n      })\n    });\n  },\n\n  // Create new idea\n  createNewIdea: async () => {\n    return makeAuthenticatedRequest(\"/api/idea\", {\n      method: 'POST'\n    });\n  },\n\n  // Test idea generation (legacy handler)\n  generateIdeasTest: async () => {\n    return makeAuthenticatedRequest(\"/api/post/generate/ideas-test\");\n  }\n};\n\n// Define message types\ninterface ApiRequestMessage {\n  type: \"API_REQUEST\";\n  action: keyof ApiHandlers;\n  params?: unknown[];\n}\n\ninterface GenerateIdeasMessage {\n  type: \"GENERATE_IDEAS\";\n}\n\ntype ChromeMessage = ApiRequestMessage | GenerateIdeasMessage;\n\n// Helper function to safely call API handlers with dynamic parameters\nfunction callApiHandler(action: keyof ApiHandlers, params: unknown[] = []): Promise<any> {\n  switch (action) {\n    case 'updateIdeaStatus':\n      return apiHandlers.updateIdeaStatus(\n        params[0] as string, \n        params[1] as IdeaStatus | \"favorite\"\n      );\n    case 'updateIdeaContent':\n      return apiHandlers.updateIdeaContent(\n        params[0] as string,\n        params[1] as string,\n        params[2] as string,\n        params[3] as string\n      );\n    case 'generateIdeas':\n      return apiHandlers.generateIdeas(\n        params[0] as string | undefined,\n        params[1] as number | undefined,\n        params[2] as boolean | undefined\n      );\n    case 'improveText':\n      return apiHandlers.improveText(\n        params[0] as string,\n        params[1] as string,\n        params[2] as string\n      );\n    case 'improveTitle':\n      return apiHandlers.improveTitle(\n        params[0] as \"title\" | \"subtitle\",\n        params[1] as string,\n        params[2] as string,\n        params[3] as string\n      );\n    case 'createNewIdea':\n      return apiHandlers.createNewIdea();\n    case 'generateIdeasTest':\n      return apiHandlers.generateIdeasTest();\n    default:\n      return Promise.reject(new Error(`Unknown action: ${action}`));\n  }\n}\n\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((request: ChromeMessage, sender, sendResponse) => {\n  console.log(\"Background script received message:\", request);\n\n  // Handle API requests\n  if (request.type === \"API_REQUEST\") {\n    const { action, params } = request;\n    \n    if (action) {\n      callApiHandler(action, params)\n        .then((data: any) => {\n          sendResponse({ success: true, data });\n        })\n        .catch((error: Error) => {\n          console.error(`Error in API request (${action}):`, error);\n          sendResponse({ success: false, error: error.message });\n        });\n      return true; // Will respond asynchronously\n    }\n  }\n  \n  // Legacy handler for backward compatibility\n  if (request.type === \"GENERATE_IDEAS\") {\n    apiHandlers.generateIdeasTest()\n      .then((data: any) => {\n        sendResponse({ success: true, data });\n      })\n      .catch((error: Error) => {\n        console.error(\"Error generating ideas:\", error);\n        sendResponse({ success: false, error: error.message });\n      });\n    return true; // Will respond asynchronously\n  }\n});\n\nexport { makeAuthenticatedRequest };\n"],"names":["API_BASE_URL","makeAuthenticatedRequest","endpoint","options","response","apiHandlers","ideaId","status","searchParamsStatus","body","title","subtitle","topic","ideasCount","shouldSearch","text","type","menuType","improveType","value","callApiHandler","action","params","request","sender","sendResponse","data","error"],"mappings":"AAKA,MAAMA,EAAe,wBAErB,eAAeC,EACbC,EACAC,EAAuB,GACvB,CACA,MAAMC,EAAW,MAAM,MAAM,GAAGJ,IAAeE,IAAY,CACzD,GAAGC,EACH,YAAa,UACb,QAAS,CACP,eAAgB,mBAChB,GAAGA,EAAQ,OACb,CAAA,CACD,EAEG,OAACC,EAAS,GAIPA,EAAS,OAHP,IAIX,CAcA,MAAMC,EAA2B,CAE/B,iBAAkB,MAAOC,EAAgBC,IAAoC,CAC3E,MAAMC,EAAqBD,IAAW,WAAa,kBAAoB,UAAUA,IAC1E,OAAAN,EAAyB,aAAaK,YAAiBE,IAAsB,CAClF,OAAQ,OAAA,CACT,CACH,EAGA,kBAAmB,MAAOF,EAAgBG,EAAcC,EAAeC,IAC9DV,EAAyB,aAAaK,IAAU,CACrD,OAAQ,QACR,KAAM,KAAK,UAAU,CACnB,KAAAG,EACA,MAAAC,EACA,SAAAC,CAAA,CACD,CAAA,CACF,EAIH,cAAe,MAAOC,EAAgB,GAAIC,EAAqB,EAAGC,EAAwB,KACjFb,EACL,kCAAkCW,gBAAoBC,kBAA2BC,GAAA,EAKrF,YAAa,MAAOC,EAAcC,EAAcV,IACvCL,EAAyB,oBAAqB,CACnD,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,KAAAc,EACA,KAAAC,EACA,OAAAV,CAAA,CACD,CAAA,CACF,EAIH,aAAc,MAAOW,EAAgCC,EAAqBZ,EAAgBa,IACjFlB,EAAyB,0BAA2B,CACzD,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,SAAAgB,EACA,YAAAC,EACA,OAAAZ,EACA,MAAAa,CAAA,CACD,CAAA,CACF,EAIH,cAAe,SACNlB,EAAyB,YAAa,CAC3C,OAAQ,MAAA,CACT,EAIH,kBAAmB,SACVA,EAAyB,+BAA+B,CAEnE,EAgBA,SAASmB,EAAeC,EAA2BC,EAAoB,GAAkB,CAC/E,OAAAD,OACD,mBACH,OAAOhB,EAAY,iBACjBiB,EAAO,GACPA,EAAO,EAAA,MAEN,oBACH,OAAOjB,EAAY,kBACjBiB,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,EAAA,MAEN,gBACH,OAAOjB,EAAY,cACjBiB,EAAO,GACPA,EAAO,GACPA,EAAO,EAAA,MAEN,cACH,OAAOjB,EAAY,YACjBiB,EAAO,GACPA,EAAO,GACPA,EAAO,EAAA,MAEN,eACH,OAAOjB,EAAY,aACjBiB,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,EAAA,MAEN,gBACH,OAAOjB,EAAY,oBAChB,oBACH,OAAOA,EAAY,4BAEnB,OAAO,QAAQ,OAAO,IAAI,MAAM,mBAAmBgB,GAAQ,CAAC,EAElE,CAGA,OAAO,QAAQ,UAAU,YAAY,CAACE,EAAwBC,EAAQC,IAAiB,CAIjF,GAHI,QAAA,IAAI,sCAAuCF,CAAO,EAGtDA,EAAQ,OAAS,cAAe,CAC5B,KAAA,CAAE,OAAAF,EAAQ,OAAAC,CAAW,EAAAC,EAE3B,GAAIF,EACF,OAAAD,EAAeC,EAAQC,CAAM,EAC1B,KAAMI,GAAc,CACnBD,EAAa,CAAE,QAAS,GAAM,KAAAC,CAAM,CAAA,CAAA,CACrC,EACA,MAAOC,GAAiB,CACf,QAAA,MAAM,yBAAyBN,MAAYM,CAAK,EACxDF,EAAa,CAAE,QAAS,GAAO,MAAOE,EAAM,QAAS,CAAA,CACtD,EACI,EAEX,CAGI,GAAAJ,EAAQ,OAAS,iBACnB,OAAAlB,EAAY,kBAAkB,EAC3B,KAAMqB,GAAc,CACnBD,EAAa,CAAE,QAAS,GAAM,KAAAC,CAAM,CAAA,CAAA,CACrC,EACA,MAAOC,GAAiB,CACf,QAAA,MAAM,0BAA2BA,CAAK,EAC9CF,EAAa,CAAE,QAAS,GAAO,MAAOE,EAAM,QAAS,CAAA,CACtD,EACI,EAEX,CAAC"}