{"version":3,"file":"background.js","sources":["../../src/content/background.ts"],"sourcesContent":["// background.ts\nimport { IdeaStatus } from \"@/types/idea\";\n\n// Base URL for API requests\nconst API_BASE_URL = \"http://localhost:3000\";\n\n// Queue for scheduled posts\ninterface ScheduledPost {\n  id: string;\n  message: string;\n  scheduledTime: number;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  error?: string;\n  autoCloseTab?: boolean;\n}\n\n// Store posts in chrome.storage for persistence across extension reloads\nlet scheduledPosts: ScheduledPost[] = [];\n\n// Enhanced logging function\nfunction logScheduledPost(message: string, data?: any) {\n  const timestamp = new Date().toISOString();\n  console.log(`[SCHEDULED POST ${timestamp}] ${message}`, data ? data : \"\");\n}\n\nasync function makeAuthenticatedRequest(\n  endpoint: string,\n  options: RequestInit = {}\n) {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    ...options,\n    credentials: \"include\", // Include cookies automatically\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options.headers,\n    },\n  });\n\n  if (!response.ok) {\n    return null;\n  }\n\n  return response.json();\n}\n\n// Define API handler types\ntype ApiHandlers = {\n  updateIdeaStatus: (\n    ideaId: string,\n    status: IdeaStatus | \"favorite\"\n  ) => Promise<any>;\n  updateIdeaContent: (\n    ideaId: string,\n    body: string,\n    title: string,\n    subtitle: string\n  ) => Promise<any>;\n  generateIdeas: (\n    topic?: string,\n    ideasCount?: number,\n    shouldSearch?: boolean\n  ) => Promise<any>;\n  improveText: (text: string, type: string, ideaId: string) => Promise<any>;\n  improveTitle: (\n    menuType: \"title\" | \"subtitle\",\n    improveType: string,\n    ideaId: string,\n    value: string\n  ) => Promise<any>;\n  createNewIdea: () => Promise<any>;\n  generateIdeasTest: () => Promise<any>;\n  createSubstackPost: (\n    message?: string,\n    scheduleSeconds?: number,\n    autoCloseTab?: boolean\n  ) => Promise<any>;\n\n};\n\n// API request handlers\nconst apiHandlers: ApiHandlers = {\n  // Idea status update\n  updateIdeaStatus: async (ideaId: string, status: IdeaStatus | \"favorite\") => {\n    const searchParamsStatus =\n      status === \"favorite\" ? \"isFavorite=true\" : `status=${status}`;\n    return makeAuthenticatedRequest(\n      `/api/idea/${ideaId}/status?${searchParamsStatus}`,\n      {\n        method: \"PATCH\",\n      }\n    );\n  },\n\n  // Idea content update\n  updateIdeaContent: async (\n    ideaId: string,\n    body: string,\n    title: string,\n    subtitle: string\n  ) => {\n    return makeAuthenticatedRequest(`/api/idea/${ideaId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        body,\n        title,\n        subtitle,\n      }),\n    });\n  },\n\n  // Generate ideas\n  generateIdeas: async (\n    topic: string = \"\",\n    ideasCount: number = 3,\n    shouldSearch: boolean = false\n  ) => {\n    return makeAuthenticatedRequest(\n      `/api/post/generate/ideas?topic=${topic}&ideasCount=${ideasCount}&shouldSearch=${shouldSearch}`\n    );\n  },\n\n  // Improve text\n  improveText: async (text: string, type: string, ideaId: string) => {\n    return makeAuthenticatedRequest(\"/api/post/improve\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        text,\n        type,\n        ideaId,\n      }),\n    });\n  },\n\n  // Improve title or subtitle\n  improveTitle: async (\n    menuType: \"title\" | \"subtitle\",\n    improveType: string,\n    ideaId: string,\n    value: string\n  ) => {\n    return makeAuthenticatedRequest(\"/api/post/improve/title\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        menuType,\n        improveType,\n        ideaId,\n        value,\n      }),\n    });\n  },\n\n  // Create new idea\n  createNewIdea: async () => {\n    return makeAuthenticatedRequest(\"/api/idea\", {\n      method: \"POST\",\n    });\n  },\n\n  // Test idea generation (legacy handler)\n  generateIdeasTest: async () => {\n    return makeAuthenticatedRequest(\"/api/post/generate/ideas-test\");\n  },\n\n  // Create a post on Substack\n  createSubstackPost: async (bodyJson: any) => {\n    try {\n      // if bodyjson is not a string, stringify it\n      const body =\n        typeof bodyJson === \"string\" ? bodyJson : JSON.stringify(bodyJson);\n\n      const response = await fetch(\"https://substack.com/api/v1/comment/feed\", {\n        headers: {\n          \"content-type\": \"application/json\",\n          Referer: \"https://substack.com/home\",\n          \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n        },\n        body,\n        method: \"POST\",\n      });\n      const data = await response.json();\n      return {\n        message: \"Post created successfully\",\n        action: \"SUBSTACK_POST_CREATED\",\n        result: JSON.stringify(data),\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      logScheduledPost(\"Error creating Substack post\", { error: errorMessage });\n      console.error(\"Error creating Substack post:\", error);\n      throw error;\n    }\n  },\n};\n\n// Define message types\ninterface ApiRequestMessage {\n  type: \"API_REQUEST\" | \"PING\";\n  action: keyof ApiHandlers;\n  params?: unknown[];\n}\n\ninterface GenerateIdeasMessage {\n  type: \"GENERATE_IDEAS\";\n}\n\ntype ChromeMessage = ApiRequestMessage | GenerateIdeasMessage;\n\n// Helper function to safely call API handlers with dynamic parameters\nfunction callApiHandler(\n  action: keyof ApiHandlers,\n  params: unknown[] = []\n): Promise<any> {\n  switch (action) {\n    case \"updateIdeaStatus\":\n      return apiHandlers.updateIdeaStatus(\n        params[0] as string,\n        params[1] as IdeaStatus | \"favorite\"\n      );\n    case \"updateIdeaContent\":\n      return apiHandlers.updateIdeaContent(\n        params[0] as string,\n        params[1] as string,\n        params[2] as string,\n        params[3] as string\n      );\n    case \"generateIdeas\":\n      return apiHandlers.generateIdeas(\n        params[0] as string | undefined,\n        params[1] as number | undefined,\n        params[2] as boolean | undefined\n      );\n    case \"improveText\":\n      return apiHandlers.improveText(\n        params[0] as string,\n        params[1] as string,\n        params[2] as string\n      );\n    case \"improveTitle\":\n      return apiHandlers.improveTitle(\n        params[0] as \"title\" | \"subtitle\",\n        params[1] as string,\n        params[2] as string,\n        params[3] as string\n      );\n    case \"createNewIdea\":\n      return apiHandlers.createNewIdea();\n    case \"generateIdeasTest\":\n      return apiHandlers.generateIdeasTest();\n    case \"createSubstackPost\":\n      return apiHandlers.createSubstackPost(\n        params[0] as string | undefined,\n        params[1] as number | undefined,\n        params[2] as boolean | undefined\n      );\n    default:\n      return Promise.reject(new Error(`Unknown action: ${action}`));\n  }\n}\n\nchrome.runtime.onMessageExternal.addListener(\n  (request: ChromeMessage, sender, sendResponse) => {\n    console.log(\n      \"Background script received external message:\",\n      request,\n      \"from:\",\n      sender.url,\n      \"Type: \",\n      request.type\n    );\n\n    // Handle PING message - respond immediately without async\n    if (request.type === \"PING\") {\n      console.log(\"Received external PING, responding immediately\");\n      sendResponse({\n        success: true,\n        timestamp: Date.now(),\n        message: \"Extension is active\",\n        source: \"external\",\n      });\n      return false; // No async response needed\n    }\n\n    // Handle API requests\n    if (request.type === \"API_REQUEST\") {\n      const { action, params } = request;\n      console.log(\"Received API request:\", action, params);\n      if (action) {\n        callApiHandler(action, params)\n          .then((data: any) => {\n            sendResponse({ success: true, data });\n          })\n          .catch((error: Error) => {\n            console.error(`Error in API request (${action}):`, error);\n            sendResponse({ success: false, error: error.message });\n          });\n        return true; // Will respond asynchronously\n      }\n    }\n\n    return false;\n  }\n);\n\nexport { makeAuthenticatedRequest };\n"],"names":["API_BASE_URL","logScheduledPost","message","data","timestamp","makeAuthenticatedRequest","endpoint","options","response","apiHandlers","ideaId","status","searchParamsStatus","body","title","subtitle","topic","ideasCount","shouldSearch","text","type","menuType","improveType","value","bodyJson","error","errorMessage","callApiHandler","action","params","request","sender","sendResponse"],"mappings":"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"}